name: qa-CXOTulz-aws-cron CI_CD

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  Build:
    name: Build Image
    runs-on: ubuntu-latest

    # Setting build timeout .
    timeout-minutes: 2

    steps:
     - uses: Hrithikwmp/man-approval@v1
       with:
          secret: ${{ TOKEN_GITHUB }}
          approvers: Hrithikwmp


    steps:
    # To Checkout the code.
    - name: Check out code
      uses: actions/checkout@v2
    
    # For ECR login.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
      # This command builds and push the image to ECR
    - run: npm run push-docker-image

      # This will only send slack message on job failure
    - name: Post to Slack - error
      uses: act10ns/slack@v1
      if: failure()
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#cicd-cxo'

  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - uses: actions/checkout@v2
      - name: Set env
        run: echo "PACKAGE_VERSION=$(npm run version --silent)" >> $GITHUB_ENV

      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.QA_EC2_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.QA_EC2_HOST  }}
            USER_NAME : ${{ secrets.QA_EC2_USER  }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: us-east-2
        run: |
          echo $PACKAGE_VERSION
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -i private_key -o 'StrictHostKeyChecking=no' ${USER_NAME}@${HOSTNAME} "
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_REGION=$AWS_REGION
          docker login -u AWS -p $(aws ecr get-login-password --region us-east-2) 743906152285.dkr.ecr.us-east-2.amazonaws.com
          docker pull 743906152285.dkr.ecr.us-east-2.amazonaws.com/cxotulz-aws-cron:$PACKAGE_VERSION && \
          docker rm -f cxo-aws-cron && \
          docker run -d \
            --network=cxotools \
            --name cxo-aws-cron \
            --restart=unless-stopped \
            --memory="300m" \
            --cpus="0.15" \
            --env-file /home/ec2-user/env-cron \
            743906152285.dkr.ecr.us-east-2.amazonaws.com/cxotulz-aws-cron:$PACKAGE_VERSION && \
          docker image prune -af"

      - name: Slack Notification
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cicd-cxo'
        if: always()
